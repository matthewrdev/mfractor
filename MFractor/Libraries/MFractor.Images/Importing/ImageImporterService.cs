using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using MFractor.Images.Models;
using MFractor.Images.Utilities;
using MFractor.Progress;
using MFractor.Utilities;
using MFractor.Workspace.Utilities;
using MFractor.Workspace.WorkUnits;
using Microsoft.CodeAnalysis;
using Newtonsoft.Json;

namespace MFractor.Images.Importing
{
    abstract class ImageImporterService : IImageImporterService
    {
        readonly Logging.ILogger log = Logging.Logger.Create();

        readonly Lazy<IDialogsService> dialogsService;
        IDialogsService DialogsService => dialogsService.Value;

        readonly Lazy<IImageUtilities> imageUtil;
        IImageUtilities ImageUtil => imageUtil.Value;

        protected ImageImporterService(Lazy<IDialogsService> dialogsService,
                                       Lazy<IImageUtilities> imageUtil)
        {
            this.dialogsService = dialogsService;
            this.imageUtil = imageUtil;
        }

        public async Task<bool> Import(IEnumerable<ImportImageOperation> operations, IProgressMonitor progressMonitor)
        {
            if (operations == null || !operations.Any())
            {
                log?.Warning("No image import operations provided to the importer service.");
                return false;
            }

            var success = true;

            foreach (var operation in operations)
            {
                try
                {
                    success &= await Import(operation, progressMonitor);
                }
                catch (Exception ex)
                {
                    success = false;
                    log?.Exception(ex);
                }
            }

            return success;
        }

        public async Task<bool> Import(ImportImageOperation operation, IProgressMonitor progressMonitor)
        {
            var project = operation.TargetProject;

            var sourceImageSize = ImageUtil.GetImageSize(operation.AnyAppearanceImageFilePath);
            if (operation.SourceSize != null)
            {
                sourceImageSize = operation.SourceSize;
            }

            var workUnits = new List<CreateProjectFileWorkUnit>();

            var densities = operation.Densities;
            foreach (var density in densities)
            {
                var virtualPath = ImageDownsamplingHelper.GetVirtualFilePath(operation, density);

                workUnits.Add(ImportDownSampledImageIntoProject(project, sourceImageSize, virtualPath, density, operation.SourceDensity, operation.AnyAppearanceImageFilePath, operation.ResourceType));
            }

            if (operation.ResourceType == ImageResourceType.AssetCatalog)
            {
                workUnits.Add(ImportAssetCatalogImageSetMetadataIntoProject(project, operation));
            }

            var collisions = workUnits.Where(r => File.Exists(r.FilePath));
            if (collisions.Any())
            {
                var message = "The following images to be generated by the image importer for " + project.Name + " already exist:\n\n";

                foreach (var collision in collisions)
                {
                    message += " - " + collision.FilePath;
                    message += Environment.NewLine;
                }

                message += Environment.NewLine;
                message += "What would you like to do?";

                var choice = DialogsService.AskQuestion(new Question("Overwrite files?", message), "Cancel", "Continue (Overwrite all)");

                if (choice == "Cancel")
                {
                    return default;
                }

                foreach (var collision in collisions)
                {
                    collision.ShouldOverWrite = true;
                }
            }

            var result = await ImportUtils.CreateImageFiles(operation.TargetProject, workUnits, progressMonitor, log);

            return await AddProjectFiles(operation, operation.TargetProject, workUnits, progressMonitor);
        }

        protected abstract Task<bool> AddProjectFiles(ImportImageOperation operation, Project project, IEnumerable<CreateProjectFileWorkUnit> workUnits, IProgressMonitor progressMonitor);

        CreateProjectFileWorkUnit ImportDownSampledImageIntoProject(Project project,
                                                                    ImageSize sourceImageSize,
                                                                    string virtualPath,
                                                                    ImageDensity density,
                                                                    ImageDensity sourceDensity,
                                                                    string sourceImagePath,
                                                                    ImageResourceType resourceType)
        {
            var newSize = ImageDownsamplingHelper.GetTransformedImageSize(sourceImageSize,
                                                                          density.Scale,
                                                                          sourceDensity.Scale);

            var extension = Path.GetExtension(virtualPath);

            var buildAction = GetBuildAction(project, resourceType);

            var outputPath = VirtualFilePathHelper.VirtualProjectPathToDiskPath(project, virtualPath);

            var workUnit = new CreateProjectFileWorkUnit()
            {
                FilePath = outputPath,
                TargetProject = project,
                IsBinary = true,
                BuildAction = buildAction,
                ShouldAddFoldersToMsBuild = false,
                WriteContentAction = (stream) =>
                {
                    ImageUtil.ResizeImage(sourceImagePath, newSize.Width, newSize.Height, stream);
                }
            };

            return workUnit;
        }

        JsonSerializerSettings IgnoreNullJsonSettings => new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore, };

        CreateProjectFileWorkUnit ImportAssetCatalogImageSetMetadataIntoProject(Project project, ImportImageOperation operation)
        {
            if (operation.ResourceType != ImageResourceType.AssetCatalog)
            {
                return null;
            }

            var metadata = new IOSAssetCatalogMetadata();
            foreach (var density in operation.Densities)
            {
                var filename = ImageDownsamplingHelper.GetIOSImageFileNameWithDensity(operation, density);
                var image = new IOSImageSetEntry
                {
                    Filename = filename,
                    Scale = density.Name.Replace("@", ""),
                };
                metadata.Images.Add(image);
            }

            var jsonMetadata = JsonConvert.SerializeObject(metadata, Newtonsoft.Json.Formatting.Indented, IgnoreNullJsonSettings);
            var imageSetPath = ImageDownsamplingHelper.GetIOSAssetCatalogImageSetVirtualPath(operation.ImageName);
            var virtualFilePath = Path.Combine(imageSetPath, "Contents.json");
            var outputPath = VirtualFilePathHelper.VirtualProjectPathToDiskPath(project, virtualFilePath);

            return new CreateProjectFileWorkUnit
            {
                TargetProject = project,
                FilePath = outputPath,
                FileContent = jsonMetadata,
                ShouldOpen = false,
                Visible = false,
                ShouldAddFoldersToMsBuild = false,
            };
        }

        protected string GetBuildAction(Project project, ImageResourceType resourceType)
        {
            var buildAction = "None";

            if (project.IsAndroidProject())
            {
                buildAction = "AndroidResource";
            }
            else if (project.IsAppleUnifiedProject() && resourceType == ImageResourceType.BundleResource)
            {
                buildAction = "BundleResource";
            }
            else if (project.IsAppleUnifiedProject() && resourceType == ImageResourceType.AssetCatalog)
            {
                buildAction = "ImageAsset";
            }

            return buildAction;
        }
    }
}