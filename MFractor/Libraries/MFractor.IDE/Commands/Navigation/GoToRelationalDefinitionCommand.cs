using System;
using System.ComponentModel.Composition;
using MFractor.Commands;
using MFractor.Configuration;
using MFractor.Ide.Navigation;
using MFractor.Utilities;
using MFractor.Work;
using MFractor.Workspace;
using MFractor.Workspace.Utilities;

namespace MFractor.Ide.Commands.Navigation
{
    [PartCreationPolicy(CreationPolicy.Shared)]
    [Export]
    class GoToRelationalDefinitionCommand : ICommand
    {
        readonly Lazy<IWorkEngine> workEngine;
        public IWorkEngine WorkEngine => workEngine.Value;

        readonly Lazy<IRelationalNavigationService> relationalNavigationService;
        public IRelationalNavigationService RelationalNavigationService => relationalNavigationService.Value;

        readonly Lazy<IProjectService> projectService;
        public IProjectService ProjectService => projectService.Value;

        [ImportingConstructor]
        public GoToRelationalDefinitionCommand(Lazy<IWorkEngine> workEngine,
                                               Lazy<IRelationalNavigationService> relationalNavigationService,
                                               Lazy<IProjectService> projectService)
        {
            this.workEngine = workEngine;
            this.relationalNavigationService = relationalNavigationService;
            this.projectService = projectService;
        }

        IProjectFile GetProjectFile(ICommandContext commandContext)
        {
            if (commandContext is IDocumentCommandContext documentCommandContext)
            {
                if (SymbolHelper.IsAutoGeneratedFilePath(documentCommandContext.FilePath))
                {
                    return new AdHocProjectFile(documentCommandContext.CompilationProject, documentCommandContext.FilePath);
                }

                return ProjectService.GetProjectFileWithFilePath(documentCommandContext.CompilationProject, documentCommandContext.FilePath);
            }

            return default;
        }

        public void Execute(ICommandContext commandContext)
        {
            var projectFile = GetProjectFile(commandContext);
            var resolver = RelationalNavigationService.ResolveRelationalNavigationHandler(projectFile);
            var configId = ConfigurationId.Create(projectFile.CompilationProject.GetIdentifier());

            var result = resolver.NavigateToDefinition(projectFile.CompilationProject, projectFile.FilePath, configId);

            WorkEngine.ApplyAsync(result).ConfigureAwait(false);
        }

        public ICommandState GetExecutionState(ICommandContext commandContext)
        {
            var projectFile = GetProjectFile(commandContext);
            if (projectFile is null)
            {
                return CommandState.BlockOthers;
            }

            var handler = RelationalNavigationService.ResolveRelationalNavigationHandler(projectFile);
            if (handler is null)
            {
                return CommandState.BlockOthers;
            }

            var configId = ConfigurationId.Create(projectFile.CompilationProject.GetIdentifier());

            var canNavigate = handler.CanNavigateToDefinition(projectFile.CompilationProject, projectFile.FilePath, configId);
            if (!canNavigate)
            {
                return CommandState.BlockOthers;
            }

            return new CommandState()
            {
                BlockSubsequentCommands = true,
                Label = $"Go To {handler.DefinitionDisplayName}",
                Description = $"Navigates to the {handler.DefinitionDisplayName} for this file"
            };
        }
    }
}