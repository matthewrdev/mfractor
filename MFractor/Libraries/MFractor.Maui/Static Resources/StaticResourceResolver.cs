using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.IO;
using System.Linq;
using MFractor.Configuration;
using MFractor.Maui.Configuration;
using MFractor.Maui.Data.Models;
using MFractor.Maui.Data.Repositories;
using MFractor.Maui.Mvvm;
using MFractor.Maui.XamlPlatforms;
using MFractor.Utilities;
using MFractor.Workspace;
using MFractor.Workspace.Data;
using MFractor.Workspace.Data.Repositories;
using MFractor.Workspace.Utilities;
using Microsoft.CodeAnalysis;
using ProjectFileModel = MFractor.Workspace.Data.Models.ProjectFile;

namespace MFractor.Maui.StaticResources
{
    [PartCreationPolicy(CreationPolicy.Shared)]
    [Export(typeof(IStaticResourceResolver))]
    class StaticResourceResolver : IStaticResourceResolver
    {
        readonly Lazy<IResourcesDatabaseEngine> resourcesDatabaseEngine;
        public IResourcesDatabaseEngine ResourcesDatabaseEngine => resourcesDatabaseEngine.Value;

        readonly Lazy<IProjectService> projectService;
        public IProjectService ProjectService => projectService.Value;

        readonly Lazy<IConfigurationEngine> configurationEngine;
        public IConfigurationEngine ConfigurationEngine => configurationEngine.Value;

        readonly Lazy<IMvvmResolver> mvvmResolver;
        public IMvvmResolver MvvmResolver => mvvmResolver.Value;

        [ImportingConstructor]
        public StaticResourceResolver(Lazy<IResourcesDatabaseEngine> resourcesDatabaseEngine,
                                      Lazy<IProjectService> projectService,
                                      Lazy<IConfigurationEngine> configurationEngine,
                                      Lazy<IMvvmResolver> mvvmResolver)
        {
            this.resourcesDatabaseEngine = resourcesDatabaseEngine;
            this.projectService = projectService;
            this.configurationEngine = configurationEngine;
            this.mvvmResolver = mvvmResolver;
        }

        public IStaticResourceCollection GetAvailableResources(Project project, IXamlPlatform platform, string filePath, bool includeAppplicationResources = true)
        {
            var result = new StaticResourceCollection(ResourcesDatabaseEngine, filePath, project);
            if (project == null)
            {
                return result;
            }

            var configId = ConfigurationId.Create(project.GetIdentifier());

            var database = ResourcesDatabaseEngine.GetProjectResourcesDatabase(project);

            if (database == null || !database.IsValid)
            {
                return result;
            }

            var file = database.GetRepository<ProjectFileRepository>().GetProjectFileByFilePath(filePath);

            if (file == null || file.GCMarked)
            {
                return result;
            }


            BuildFileResources(project, filePath, result);

            if (includeAppplicationResources)
            {
                var application = ConfigurationEngine.Resolve<IAppXamlConfiguration>(configId).ResolveAppXamlFile(project, platform);
                if (application != null && application.FilePath != filePath)
                {
                    BuildFileResources(project, application.FilePath, result);
                }
            }

            var parentFiles = GetParentXAMLFiles(project, filePath);

            if (parentFiles != null && parentFiles.Any())
            {
                foreach (var parent in parentFiles)
                {
                    BuildFileResources(project, parent.FilePath, result);
                }
            }

            var dictionaryReferences = database.GetRepository<ResourceDictionaryReferenceRepository>().GetResourceDictionaryReferencesInFile(file);

            if (dictionaryReferences != null
                && dictionaryReferences.Any()
                && project.TryGetCompilation(out var compilation))
            {
                foreach (var dr in dictionaryReferences)
                {
                    if (dr.ReferenceKind == DictionaryReferenceKind.Symbol)
                    {
                        var symbol = compilation.GetTypeByMetadataName(dr.MetaTypeName);

                        var resourceProject = SymbolHelper.GetProjectForSymbol(project.Solution, symbol);

                        if (symbol != null && resourceProject != null)
                        {
                            var resourceSyntax = symbol.GetNonAutogeneratedSyntax();

                            if (resourceSyntax != null)
                            {
                                var xamlFile = resourceSyntax.SyntaxTree.FilePath.Replace(".xaml.cs", ".xaml");

                                BuildFileResources(project, xamlFile, result);
                            }
                        }
                    }
                }
            }

            return result;
        }

        void BuildFileResources(Project project, string filePath, StaticResourceCollection staticResourceCollection)
        {
            var database = ResourcesDatabaseEngine.GetProjectResourcesDatabase(project);

            if (database == null || !database.IsValid)
            {
                return;
            }

            var file = database.GetRepository<ProjectFileRepository>().GetProjectFileByFilePath(filePath);

            if (file == null || file.GCMarked)
            {
                return;
            }

            var resources = database.GetRepository<StaticResourceDefinitionRepository>().GetStaticResourcesInFile(file);

            staticResourceCollection.AddRange(project, file, resources);

            var dictionaryReferences = database.GetRepository<ResourceDictionaryReferenceRepository>().GetResourceDictionaryReferencesInFile(file);

            if (dictionaryReferences != null && dictionaryReferences.Any())
            {
                if (project.TryGetCompilation(out var compilation))
                {
                    foreach (var dr in dictionaryReferences)
                    {
                        if (dr.GCMarked)
                        {
                            continue;
                        }

                        if (dr.ReferenceKind == DictionaryReferenceKind.FileName)
                        {
                            var fileName = Path.GetFileName(dr.FileName);

                            var resourceFile = ProjectService.FindProjectFile(project, fp => Path.GetFileName(fp).Equals(fileName, StringComparison.OrdinalIgnoreCase));

                            if (resourceFile != null)
                            {
                                BuildFileResources(project, resourceFile.FilePath, staticResourceCollection);
                            }
                        }
                        else if (dr.ReferenceKind == DictionaryReferenceKind.FilePath)
                        {
                            BuildFileResources(project, dr.FileName, staticResourceCollection);
                        }
                        else if (dr.ReferenceKind == DictionaryReferenceKind.Symbol)
                        {
                            var symbol = compilation.GetTypeByMetadataName(dr.MetaTypeName);

                            if (symbol == null)
                            {
                                continue;
                            }

                            var symbolProject = SymbolHelper.GetProjectForSymbol(project.Solution, symbol);
                            if (symbolProject == null)
                            {
                                continue;
                            }

                            var declaration = symbol.GetNonAutogeneratedSyntax();
                            if (declaration == null)
                            {
                                continue;
                            }

                            var symbolFile = MvvmResolver.ResolveXamlView(symbolProject, declaration.SyntaxTree.FilePath);
                            if (!File.Exists(symbolFile))
                            {
                                continue;
                            }

                            BuildFileResources(symbolProject, symbolFile, staticResourceCollection);
                        }
                    }
                }
            }
        }

        public IStaticResourceCollection FindNamedStaticResources(Project project,
                                                                  IXamlPlatform platform,
                                                                  string filePath,
                                                                  string resourceName,
                                                                  bool searchApplicationResources = true,
                                                                  bool searchBaseClasses = true)
        {
            var result = new StaticResourceCollection(ResourcesDatabaseEngine, filePath, project);

            BuildNamedStaticResources(project, platform, filePath, resourceName, result, searchApplicationResources, searchBaseClasses);

            return result;
        }

        public List<ProjectFileModel> GetParentXAMLFiles(Project project, string filePath)
        {
            var configId = ConfigurationId.Create(project.GetIdentifier());
            var result = new List<ProjectFileModel>();

            var database = ResourcesDatabaseEngine.GetProjectResourcesDatabase(project);

            if (database == null || !database.IsValid)
            {
                return result;
            }

            var projectFileRepo = database.GetRepository<ProjectFileRepository>();
            var classDeclarationRepository = database.GetRepository<ClassDeclarationRepository>();

            var file = projectFileRepo.GetProjectFileByFilePath(filePath);

            if (file == null || file.GCMarked)
            {
                return result;
            }

            var xClass = classDeclarationRepository.GetClassForFile(file);

            if (xClass == null)
            {
                return result;
            }

            if (!project.TryGetCompilation(out var compilation))
            {
                return result;
            }

            var classSymbol = compilation.GetTypeByMetadataName(xClass.MetaDataName);

            if (classSymbol == null)
            {
                return result;
            }

            var baseClass = classSymbol.BaseType;
            while (baseClass != null)
            {
                var syntax = baseClass.DeclaringSyntaxReferences.FirstOrDefault(s => s.SyntaxTree?.FilePath?.EndsWith(".xaml.cs") ?? false);

                if (syntax != null)
                {
                    var syntaxPath = syntax.SyntaxTree.FilePath;
                    var xamlFilePath = syntaxPath.Substring(0, syntaxPath.Length - ".cs".Length);

                    var xamlFile = projectFileRepo.GetProjectFileByFilePath(xamlFilePath);

                    if (xamlFile != null && !xamlFile.GCMarked)
                    {
                        result.Add(xamlFile);
                    }
                }

                baseClass = baseClass.BaseType;
            }

            return result;
        }


        void BuildNamedStaticResources(Project project,
                                       IXamlPlatform platform,
                                       string filePath,
                                       string resourceName,
                                       StaticResourceCollection staticResourceCollection,
                                       bool searchApplicationResources = true,
                                       bool searchBaseClasses = true,
                                       HashSet<int> knownResourceDictionaryReferences = null)
        {
            if (knownResourceDictionaryReferences is null)
            {
                knownResourceDictionaryReferences = new HashSet<int>();
            }

            var configId = ConfigurationId.Create(project.GetIdentifier());

            var database = ResourcesDatabaseEngine.GetProjectResourcesDatabase(project);

            if (database == null || !database.IsValid)
            {
                return;
            }

            var file = database.GetRepository<ProjectFileRepository>().GetProjectFileByFilePath(filePath);

            if (file == null || file.GCMarked)
            {
                return;
            }

            var repo = database.GetRepository<StaticResourceDefinitionRepository>();

            var resources = repo.GetNamedStaticResourcesInFile(file, resourceName);
            staticResourceCollection.AddRange(project, file, resources);

            if (searchApplicationResources)
            {
                var application = ConfigurationEngine.Resolve<IAppXamlConfiguration>(configId).ResolveAppXamlFile(project, platform);
                if (application != null && application.FilePath != filePath)
                {
                    var appXaml = database.GetRepository<ProjectFileRepository>().GetProjectFileByFilePath(application.FilePath);

                    if (appXaml != null)
                    {
                        BuildNamedStaticResources(project, platform, appXaml.FilePath, resourceName, staticResourceCollection, false);
                    }
                }
            }

            if (searchBaseClasses)
            {
                var parentFiles = GetParentXAMLFiles(project, filePath);

                if (parentFiles != null && parentFiles.Any())
                {
                    foreach (var parent in parentFiles)
                    {
                        BuildNamedStaticResources(project, platform, parent.FilePath, resourceName, staticResourceCollection, false, false);
                    }
                }
            }

            var dictionaryReferences = database.GetRepository<ResourceDictionaryReferenceRepository>().GetResourceDictionaryReferencesInFile(file);

            if (dictionaryReferences != null
                && dictionaryReferences.Any()
                && project.TryGetCompilation(out var compilation))
            {
                foreach (var dr in dictionaryReferences)
                {
                    if (knownResourceDictionaryReferences.Contains(dr.PrimaryKey))
                    {
                        continue;
                    }

                    knownResourceDictionaryReferences.Add(dr.PrimaryKey);

                    if (dr.ReferenceKind == DictionaryReferenceKind.FileName)
                    {
                        var fileName = Path.GetFileName(dr.FileName);

                        var resourceFile = ProjectService.FindProjectFile(project, fp => Path.GetFileName(fp).Equals(fileName, StringComparison.OrdinalIgnoreCase));

                        if (resourceFile != null)
                        {
                            BuildNamedStaticResources(project, platform, resourceFile.FilePath, resourceName, staticResourceCollection, false, true, knownResourceDictionaryReferences);
                        }
                    }
                    else if (dr.ReferenceKind == DictionaryReferenceKind.FilePath)
                    {
                        BuildNamedStaticResources(project, platform, dr.FileName, resourceName, staticResourceCollection, false, true, knownResourceDictionaryReferences);
                    }
                    else
                    {
                        var symbol = compilation.GetTypeByMetadataName(dr.MetaTypeName);
                        if (symbol != null && symbol.DeclaringSyntaxReferences.Any())
                        {
                            var resourceSyntax = symbol.GetNonAutogeneratedSyntax();

                            if (resourceSyntax != null)
                            {
                                var resourceProject = project.Solution.Projects.FirstOrDefault(p => p.AssemblyName == symbol.ContainingAssembly.Name);
                                var xamlFile = resourceSyntax.SyntaxTree.FilePath.Replace(".xaml.cs", ".xaml");

                                if (resourceProject != null && File.Exists(xamlFile))
                                {
                                    BuildNamedStaticResources(resourceProject, platform, xamlFile, resourceName, staticResourceCollection, false, true, knownResourceDictionaryReferences);
                                }
                            }
                        }
                    }
                }
            }

        }
    }
}