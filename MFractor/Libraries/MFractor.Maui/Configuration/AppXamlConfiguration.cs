using System;
using System.ComponentModel.Composition;
using System.Linq;
using MFractor.Configuration;
using MFractor.Configuration.Attributes;
using MFractor.Maui.XamlPlatforms;
using MFractor.Utilities;
using MFractor.Utilities.SymbolVisitors;
using MFractor.Workspace;
using MFractor.Workspace.Utilities;
using Microsoft.CodeAnalysis;

namespace MFractor.Maui.Configuration
{
    [PartCreationPolicy(CreationPolicy.Shared)]
    [Export(typeof(IAppXamlConfiguration))]
    class AppXamlConfiguration : Configurable, IAppXamlConfiguration
    {
        [ExportProperty("The name of the App.xaml file for the project. Leave this as null or empty for MFractor to automatically resolve the App.xaml in your project.")]
        public string AppXamlFileName { get; set; } = "";

        public override string Identifier => "com.mfractor.configuration.xaml.application_name";

        public override string Name => "Application Name Configuration";

        public override string Documentation => "Enables configuration of the name of the App.xaml filename, letting users specify their own";

        readonly Lazy<IProjectService> projectService;
        public IProjectService ProjectService => projectService.Value;

        [ImportingConstructor]
        public AppXamlConfiguration(Lazy<IProjectService> projectService)
        {
            this.projectService = projectService;
        }


        public IProjectFile ResolveAppXamlFile(Project project, IXamlPlatform platform)
        {
            if (project == null)
            {
                return default;
            }

            return ResolveAppXamlFile(project.GetIdentifier(), platform);
        }

        public IProjectFile ResolveAppXamlFile(ProjectIdentifier projectIdentifier, IXamlPlatform platform)
        {
            if (projectIdentifier == null)
            {
                return default;
            }

            if (!string.IsNullOrEmpty(AppXamlFileName))
            {
                return ResolveAppXamlFile(projectIdentifier, AppXamlFileName);
            }

            var compilation = ProjectService.GetCompilation(projectIdentifier);

            if (compilation == null)
            {
                return default;
            }

            var visitor = new DerivedSymbolVisitor(platform.Application.MetaType);

            foreach (var module in compilation.Assembly.Modules)
            {
                visitor.Visit(module);
            }

            if (!visitor.Symbols.Any())
            {
                return default;
            }

            var application = visitor.Symbols.First();

            var syntaxElements = application.DeclaringSyntaxReferences.GetAllNonAutogeneratedSyntax();

            foreach (var syntax in syntaxElements)
            {
                if (!syntax.SyntaxTree.FilePath.EndsWith(".xaml.cs", StringComparison.OrdinalIgnoreCase))
                {
                    continue;
                }

                var filePath = syntax.SyntaxTree.FilePath.Replace(".xaml.cs", ".xaml");

                var file = ProjectService.GetProjectFileWithFilePath(projectIdentifier, filePath);

                if (file != null)
                {
                    return file;
                }
            }

            return default;
        }

        public IProjectFile ResolveAppXamlFile(Project project, string applicationXamlFileName)
        {
            if (project == null)
            {
                return default;
            }

            var file = ProjectService.FindProjectFile(project, fileName => fileName.EndsWith(applicationXamlFileName, StringComparison.Ordinal));

            return file;
        }

        public IProjectFile ResolveAppXamlFile(ProjectIdentifier projectIdentifier, string applicationXamlFileName)
        {
            if (projectIdentifier == null)
            {
                return default;
            }

            var file = ProjectService.FindProjectFile(projectIdentifier, fileName => fileName.EndsWith(applicationXamlFileName, StringComparison.Ordinal));

            return file;
        }
    }
}
