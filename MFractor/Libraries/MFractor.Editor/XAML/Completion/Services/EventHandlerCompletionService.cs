using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using MFractor.Configuration;
using MFractor.CSharp.CodeGeneration;
using MFractor.Editor.Utilities;
using MFractor.Code;
using MFractor.Maui;
using MFractor.Maui.Mvvm;
using MFractor.Maui.Syntax;
using MFractor.Maui.Utilities;
using MFractor.Work.WorkUnits;
using MFractor.Utilities;
using MFractor.Xml;
using Microsoft.CodeAnalysis;
using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Editor;
using MFractor.Work;
using MFractor.Code.Formatting;
using MFractor.Workspace;
using MFractor.Workspace.Utilities;
using MFractor.Code.WorkUnits;

namespace MFractor.Editor.XAML.Completion.Services
{
    [PartCreationPolicy(CreationPolicy.Shared)]
    class EventHandlerCompletionService : IXamlCompletionService
    {
        readonly Lazy<IMvvmResolver> mvvmResolver;
        public IMvvmResolver MvvmResolver => mvvmResolver.Value;

        readonly Lazy<IWorkspaceService> workspaceService;
        public IWorkspaceService WorkspaceService => workspaceService.Value;

        readonly Lazy<IConfigurationEngine> configurationEngine;
        public IConfigurationEngine ConfigurationEngine => configurationEngine.Value;

        readonly Lazy<ICodeFormattingPolicyService> formattingPolicyService;
        public ICodeFormattingPolicyService FormattingPolicyService => formattingPolicyService.Value;

        public string AnalyticsEvent => "Event Handler Completion";

        [ImportingConstructor]
        public EventHandlerCompletionService(Lazy<IMvvmResolver> mvvmResolver,
                                             Lazy<IWorkspaceService> workspaceService,
                                             Lazy<IConfigurationEngine> configurationEngine,
                                             Lazy<ICodeFormattingPolicyService> formattingPolicyService)
        {
            this.mvvmResolver = mvvmResolver;
            this.workspaceService = workspaceService;
            this.configurationEngine = configurationEngine;
            this.formattingPolicyService = formattingPolicyService;
        }

        public bool CanProvideCompletions(ITextView textView, IXamlFeatureContext context, XamlExpressionSyntaxNode xamlExpression, SnapshotPoint triggerLocation, SnapshotSpan applicableToSpan, CancellationToken token)
        {
            return GetEventSymbol(context) != null;
        }

        IEventSymbol GetEventSymbol(IXamlFeatureContext featureContext)
        {
            var attribute = featureContext.GetSyntax<XmlAttribute>();
            if (attribute == null)
            {
                return null;
            }

            return featureContext.XamlSemanticModel.GetSymbol(attribute) as IEventSymbol;
        }

        public IReadOnlyList<ICompletionSuggestion> ProvideCompletions(ITextView textView, IXamlFeatureContext context, XamlExpressionSyntaxNode xamlExpression, SnapshotPoint triggerLocation, SnapshotSpan applicableToSpan, CancellationToken token)
        {
            var items = new List<ICompletionSuggestion>();
            var eventSymbol = GetEventSymbol(context);

            var codeBehind = context.XamlDocument.CodeBehindSymbol;

            if (codeBehind.DeclaringSyntaxReferences.GetNonAutogeneratedSyntax() != null)
            {
                var actionName = "Generate Event Handler";

                var action = new CompletionSuggestion(actionName, string.Empty);
                action.AddProperty(XamlCompletionItemPropertyKeys.CompletionAction, new CompletionAction((tv, t, ci) =>
                {
                    return new TextInputWorkUnit("Generate Event Handler", "Enter Event Name", "Handle_" + eventSymbol.Name, "Generate", "Cancel", (input) =>
                    {
                        var span = TextEditorHelper.GetAttributeSpanAtOffset(textView.TextBuffer, tv.GetCaretOffset());

                        var textWorkUnit = new ReplaceTextWorkUnit()
                        {
                            Span = span,
                            Text = input,
                            FilePath = context.Document.FilePath,
                        };


                        var project = context.Project;

                        var configId = ConfigurationId.Create(context.Project.GetIdentifier());
                        var workspace = WorkspaceService.CurrentWorkspace;
                        var formatting = FormattingPolicyService.GetFormattingPolicy(project);

                        var eventSyntax = ConfigurationEngine.Resolve<IEventHandlerMethodGenerator>(configId).GenerateSyntax(eventSymbol, input);

                        var codeBehindSyntax = context.XamlDocument.CodeBehindSyntax;

                        var targetProject = project.Solution.Projects.FirstOrDefault(p => p.AssemblyName == codeBehind.ContainingAssembly.Name);

                        var generateEventhandlerWorkUnit = new InsertSyntaxNodesWorkUnit();
                        generateEventhandlerWorkUnit.HostNode = codeBehindSyntax;
                        generateEventhandlerWorkUnit.SyntaxNodes = eventSyntax.ToList();
                        generateEventhandlerWorkUnit.Workspace = workspace;
                        generateEventhandlerWorkUnit.Project = project;

                        var fileName = Path.GetFileName(codeBehindSyntax.SyntaxTree.FilePath);

                        return new List<IWorkUnit>()
                        {
                            textWorkUnit,
                            generateEventhandlerWorkUnit,
                        };
                    }).AsList();
                }));
                action.AddProperty(XamlCompletionItemPropertyKeys.TooltipText, $"Generate a new event handler in {codeBehind.Name}");
                action.AddProperty(XamlCompletionItemPropertyKeys.AnalyticsEvent, "Generate Event Handler Completion");

                items.Add(action);


            }

            var callbacks = SymbolHelper.GetAllMemberSymbols<IMethodSymbol>(codeBehind)
                                        .Where(p => p.Parameters.Length == 2)
                                        .Where(p => SymbolHelper.DerivesFrom(p.Parameters[1].Type, "System.EventArgs"));

            foreach (var callback in callbacks)
            {
                var item = new CompletionSuggestion(callback.Name, callback.Name);

                var tooltip = $"{callback.Name} ({string.Join(", ", callback.Parameters.Select(p => p.Type))}) from {codeBehind.Name}";
                item.AddProperty(XamlCompletionItemPropertyKeys.TooltipText, tooltip);

                items.Add(item);
            }

            return items;
        }
    }
}
